//
//  Copyright (c) 2018. Uber Technologies
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import Concurrency
import Foundation
import XCTest
@testable import NeedleFramework

class DependencyGraphExporterTests: AbstractGeneratorTests {

    let fixturesURL = URL(fileURLWithPath: #file).deletingLastPathComponent().deletingLastPathComponent().appendingPathComponent("Fixtures/")

    @available(OSX 10.12, *)
    func test_export_verifyContent() {
        let (components, imports) = sampleProjectParsed()
        let executor = MockSequenceExecutor()
        let exporter = DependencyGraphExporter()

        let outputURL = FileManager.default.temporaryDirectory.appendingPathComponent("generated.swift")
        let headerDocPath = fixturesURL.appendingPathComponent("HeaderDoc.txt").path
        try? exporter.export(components, with: imports, to: outputURL.path, using: executor, withTimeout: 10, include: headerDocPath)
        let generated = try? String(contentsOf: outputURL)
        XCTAssertNotNil(generated, "Could not read the generated file")

        XCTAssertTrue(generated!.contains("//\n//  Copyright Â© Uber Technologies, Inc. All rights reserved.\n//\n//  @generated by Needle\n//  swiftlint:disable custom_rules"))
        XCTAssertTrue(generated!.contains("import NeedleFoundation"))
        XCTAssertTrue(generated!.contains("import RxSwift"))
        XCTAssertTrue(generated!.contains("import UIKit"))
        XCTAssertTrue(generated!.contains("// MARK: - Registration"))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent->GameComponent\") { component in
        return GameDependency1ab5926a977f706d3195Provider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent->GameComponent->ScoreSheetComponent\") { component in
        return ScoreSheetDependency97f2595a691a56781aaaProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent->ScoreSheetComponent\") { component in
        return ScoreSheetDependencycbd7fa4bae2ee69a1926Provider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
__DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedOutComponent\") { component in
        return LoggedOutDependencyacada53ea78d270efa2fProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent\") { component in
        return EmptyDependencyProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent\") { component in
        return EmptyDependencyProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("// MARK: - Providers"))
        XCTAssertTrue(generated!.contains("""
private class GameDependency1ab5926a977f706d3195BaseProvider: GameDependency {
    var mutableScoreStream: MutableScoreStream {
        return loggedInComponent.mutableScoreStream
    }
    var playersStream: PlayersStream {
        return rootComponent.playersStream
    }
    private let loggedInComponent: LoggedInComponent
    private let rootComponent: RootComponent
"""))
        XCTAssertTrue(generated!.contains("""
private class ScoreSheetDependency97f2595a691a56781aaaBaseProvider: ScoreSheetDependency {
    var scoreStream: ScoreStream {
        return loggedInComponent.scoreStream
    }
    private let loggedInComponent: LoggedInComponent
"""))
        XCTAssertTrue(generated!.contains("""
/// ^->RootComponent->LoggedInComponent->ScoreSheetComponent
private class ScoreSheetDependencycbd7fa4bae2ee69a1926Provider: ScoreSheetDependency97f2595a691a56781aaaBaseProvider {
    init(component: NeedleFoundation.Scope) {
        super.init(loggedInComponent: component.parent as! LoggedInComponent)
    }
}
"""))
        XCTAssertTrue(generated!.contains("""
/// ^->RootComponent->LoggedOutComponent
private class LoggedOutDependencyacada53ea78d270efa2fProvider: LoggedOutDependencyacada53ea78d270efa2fBaseProvider {
    init(component: NeedleFoundation.Scope) {
        super.init(rootComponent: component.parent as! RootComponent)
    }
}
"""))
    }
}
