//
//  Copyright (c) 2018. Uber Technologies
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import Foundation

import XCTest
@testable import NeedleFramework

class PluginizedDependencyGraphExporterTests: AbstractPluginizedGeneratorTests {

    let fixturesURL = URL(fileURLWithPath: #file).deletingLastPathComponent().deletingLastPathComponent().deletingLastPathComponent().appendingPathComponent("Fixtures/Pluginized")

    @available(OSX 10.12, *)
    func test_export_verifyContent() {
        let (components, pluginizedComponents, imports, needleHash) = pluginizedSampleProjectParsed()
        let executor = MockSequenceExecutor()
        let exporter = PluginizedDependencyGraphExporter()

        let outputURL = FileManager.default.temporaryDirectory.appendingPathComponent("generated_pluginized.swift")
        let headerDocPath = fixturesURL.deletingLastPathComponent().appendingPathComponent("HeaderDoc.txt").path
        try? exporter.export(components, pluginizedComponents, with: imports, to: outputURL.path, using: executor, withTimeout: 10, include: headerDocPath, needleVersionHash: needleHash)
        let generated = try? String(contentsOf: outputURL)
        XCTAssertNotNil(generated, "Could not read the generated file")
        XCTAssertTrue(generated!.contains("//\n//  Copyright Â© Uber Technologies, Inc. All rights reserved.\n//\n//  @generated by Needle\n//  swiftlint:disable custom_rules"))
        XCTAssertTrue(generated!.contains("import NeedleFoundation"))
        XCTAssertTrue(generated!.contains("import RxSwift"))
        XCTAssertTrue(generated!.contains("import UIKit"))
        XCTAssertTrue(generated!.contains("import ScoreSheet"))
        XCTAssertTrue(generated!.contains("import TicTacToeIntegrations"))
        XCTAssertTrue(generated!.contains("let needleDependenciesHash : String? = \"f7e65514498ad4f99ae8eb589dd36bbc\""))
        XCTAssertTrue(generated!.contains("// MARK: - Registration"))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedOutComponent\") { component in
        return LoggedOutDependencyacada53ea78d270efa2fProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent\") { component in
        return EmptyDependencyProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent->GameComponent->GameNonCoreComponent->ScoreSheetComponent\") { component in
        return ScoreSheetDependencyea879b8e06763171478bProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent->LoggedInNonCoreComponent->ScoreSheetComponent\") { component in
        return ScoreSheetDependency6fb80fa6e1ee31d9ba11Provider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent->GameComponent->GameNonCoreComponent\") { component in
        return EmptyDependencyProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent->LoggedInNonCoreComponent\") { component in
        return EmptyDependencyProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent->GameComponent\") { component in
        return GameDependency1ab5926a977f706d3195Provider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __DependencyProviderRegistry.instance.registerDependencyProviderFactory(for: \"^->RootComponent->LoggedInComponent\") { component in
        return EmptyDependencyProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __PluginExtensionProviderRegistry.instance.registerPluginExtensionProviderFactory(for: \"GameComponent\") { component in
        return GamePluginExtensionProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("""
    __PluginExtensionProviderRegistry.instance.registerPluginExtensionProviderFactory(for: \"LoggedInComponent\") { component in
        return LoggedInPluginExtensionProvider(component: component)
    }
"""))
        XCTAssertTrue(generated!.contains("// MARK: - Providers"))
        XCTAssertTrue(generated!.contains("""
private class LoggedOutDependencyacada53ea78d270efa2fBaseProvider: LoggedOutDependency {
    var mutablePlayersStream: MutablePlayersStream {
        return rootComponent.mutablePlayersStream
    }
    private let rootComponent: RootComponent
    init(rootComponent: RootComponent) {
        self.rootComponent = rootComponent
    }
}
/// ^->RootComponent->LoggedOutComponent
private class LoggedOutDependencyacada53ea78d270efa2fProvider: LoggedOutDependencyacada53ea78d270efa2fBaseProvider {
    init(component: NeedleFoundation.Scope) {
        super.init(rootComponent: component.parent as! RootComponent)
    }
}
"""))
        XCTAssertTrue(generated!.contains("""
private class ScoreSheetDependencyea879b8e06763171478bBaseProvider: ScoreSheetDependency {
    var scoreStream: ScoreStream {
        return (loggedInComponent.nonCoreComponent as! LoggedInNonCoreComponent).scoreStream
    }
    private let loggedInComponent: LoggedInComponent
    init(loggedInComponent: LoggedInComponent) {
        self.loggedInComponent = loggedInComponent
    }
}
/// ^->RootComponent->LoggedInComponent->GameComponent->GameNonCoreComponent->ScoreSheetComponent
private class ScoreSheetDependencyea879b8e06763171478bProvider: ScoreSheetDependencyea879b8e06763171478bBaseProvider {
    init(component: NeedleFoundation.Scope) {
        super.init(loggedInComponent: component.parent.parent.parent as! LoggedInComponent)
    }
}
"""))
        XCTAssertTrue(generated!.contains("""
private class ScoreSheetDependency6fb80fa6e1ee31d9ba11BaseProvider: ScoreSheetDependency {
    var scoreStream: ScoreStream {
        return loggedInNonCoreComponent.scoreStream
    }
    private let loggedInNonCoreComponent: LoggedInNonCoreComponent
    init(loggedInNonCoreComponent: LoggedInNonCoreComponent) {
        self.loggedInNonCoreComponent = loggedInNonCoreComponent
    }
}
/// ^->RootComponent->LoggedInComponent->LoggedInNonCoreComponent->ScoreSheetComponent
private class ScoreSheetDependency6fb80fa6e1ee31d9ba11Provider: ScoreSheetDependency6fb80fa6e1ee31d9ba11BaseProvider {
    init(component: NeedleFoundation.Scope) {
        super.init(loggedInNonCoreComponent: component.parent as! LoggedInNonCoreComponent)
    }
}
"""))
        XCTAssertTrue(generated!.contains("""
private class GameDependency1ab5926a977f706d3195BaseProvider: GameDependency {
    var mutableScoreStream: MutableScoreStream {
        return loggedInComponent.pluginExtension.mutableScoreStream
    }
    var playersStream: PlayersStream {
        return rootComponent.playersStream
    }
    private let loggedInComponent: LoggedInComponent
    private let rootComponent: RootComponent
    init(loggedInComponent: LoggedInComponent, rootComponent: RootComponent) {
        self.loggedInComponent = loggedInComponent
        self.rootComponent = rootComponent
    }
}
/// ^->RootComponent->LoggedInComponent->GameComponent
private class GameDependency1ab5926a977f706d3195Provider: GameDependency1ab5926a977f706d3195BaseProvider {
    init(component: NeedleFoundation.Scope) {
        super.init(loggedInComponent: component.parent as! LoggedInComponent, rootComponent: component.parent.parent as! RootComponent)
    }
}
"""))
        XCTAssertTrue(generated!.contains("""
/// GameComponent plugin extension
private class GamePluginExtensionProvider: GamePluginExtension {
    var scoreSheetBuilder: ScoreSheetBuilder {
        return gameNonCoreComponent.scoreSheetBuilder
    }
    private unowned let gameNonCoreComponent: GameNonCoreComponent
    init(component: NeedleFoundation.Scope) {
        let gameComponent = component as! GameComponent
        gameNonCoreComponent = gameComponent.nonCoreComponent as! GameNonCoreComponent
    }
}
"""))
        XCTAssertTrue(generated!.contains("""
/// LoggedInComponent plugin extension
private class LoggedInPluginExtensionProvider: LoggedInPluginExtension {
    var scoreSheetBuilder: ScoreSheetBuilder {
        return loggedInNonCoreComponent.scoreSheetBuilder
    }
    var mutableScoreStream: MutableScoreStream {
        return loggedInNonCoreComponent.mutableScoreStream
    }
    private unowned let loggedInNonCoreComponent: LoggedInNonCoreComponent
    init(component: NeedleFoundation.Scope) {
        let loggedInComponent = component as! LoggedInComponent
        loggedInNonCoreComponent = loggedInComponent.nonCoreComponent as! LoggedInNonCoreComponent
    }
}
"""))
    }
}
